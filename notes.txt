Concept:
Each model is a class that maps to a table in your DB.
Each attribute in the class is a column.

Purpose:

Keeps your database structure and Python code in sync

Allows you to interact with the database using Python objects instead of raw SQL

Example idea (no code yet):
You’ll make a Product class → becomes products table
A Category class → becomes categories table


Core Concepts of Models:

Model as a Table:
A model class represents a table in the database.

Class Attributes as Columns:
Each attribute (variable) in the class represents a column in the table.

Primary Key:
Every table needs a unique identifier — usually a primary key (id). This is typically a column defined as primary_key=True.

Field Types:
You define the type of data each column holds (e.g., String, Integer, Date).

Relationships:
Models can also define how tables relate (e.g., ForeignKey, OneToMany, ManyToMany).

Example Structure:
For a Product table:

product_id: primary key

name: string

quantity: integer

price: integer

expiry_date: date

This structure is reflected in the model class.

------------------------------------------------------------------------------------------------------------------------------------------------


Concept Breakdown:
In a one-to-many relationship, one record in a table (parent) can be associated with multiple records in another table (child). In your case:

One Category can have many Products.

Each Product belongs to one Category.

How it works:
The db.relationship() in SQLAlchemy establishes the connection between the two models, but only on the "child" side (in this case, Product).

The backref option creates an automatic reverse link from the "parent" model (Category) back to the "child" model (Product), so you can access the products from a category.

Syntax Breakdown:
python
Copy code
category = db.relationship('Category', backref=db.backref('products', lazy=True))
category = db.relationship('Category'):

This line means: "Each Product can reference a Category."

It connects the Product model with the Category model, forming the one-to-many relationship from Product to Category.

backref=db.backref('products', lazy=True):

backref creates a reverse relationship from Category to Products. This means: "Each Category can access its products."

lazy=True: Products are loaded only when accessed, saving resources until needed.

Does the other model need a similar attribute?
No. You only define category in the Product model.

The backref creates the reverse relationship automatically in the Category model.

You don’t need to manually add an attribute in the Category model to access its products. The backref does that for you.

One-to-Many Relationship Explanation:
One Category has many Products, but each Product can belong to only one Category.

The relationship is stored using a foreign key (category_id in the Product model), pointing to the primary key of the Category model.

Final Structure:
Product model:
Has a foreign key category_id referencing the Category model.

Category model:
Automatically gets a products attribute via the backref, allowing access to all products related to that category.

This structure ensures you can access both sides of the relationship:

From a Product to its Category (via category).

From a Category to its Products (via products generated by the backref).